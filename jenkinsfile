pipeline {
    agent any
    environment {
        SCANNER_HOME = tool name: 'sonarqube', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
    }
    

    stages {
        stage('git checkout') {
            steps {
                checkout scmGit(branches: [[name: '*/dev']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/regal2t/java-microservice-CI-CD-complete-Pipeline-project1.git']])
            }
        }
        stage('sonarqube') {
            steps {
                script {
                    def scannerHome = tool name: 'sonarqube', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                    withEnv(["PATH+SONAR=${scannerHome}/bin"]) {
                        sh '''sonar-scanner -Dsonar.host.url=http://localhost:9000 -Dsonar.login=sqp_ddf5e3ed1949589e89603aa5f6cdb680bcdbddae -Dsonar.projectKey=java -Dsonar.projectName=java -Dsonar.java.binaries=.'''
                    }
                }
            }
        }
        stage('docker-compose build') {
            steps {
                sh 'docker-compose up --build -d'
            }
        }
        stage('view containers') {
            steps {
                sh 'docker-compose ps'
            }
        }
    }
    post {
        always {
            // Clean up Docker containers
            sh 'docker-compose down'
        }
        success {
            // Post-build actions to execute on success
            slackSend channel: '#jenkins-testing',
                      color: 'good',
                      message: "sucessful"
        }
        failure {
            // Post-build actions to execute on failure
            slackSend channel: '#jenkins-testing',
                      color: 'danger',
                      message: "failed"
        }
    }
}
